{"version":3,"file":"static/js/681.2c0da100.chunk.js","mappings":"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","sources":["webpack://chathub/./src/components/ControlledInput/ControlledInput.module.scss?63e8","components/ControlledInput/ControlledInput.tsx","webpack://chathub/./src/pages/Login/LoginDataInputs/LoginDataInputs.module.scss?82f0","pages/Login/LoginDataInputs/LoginDataInputs.tsx","pages/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"label\":\"ControlledInput_label__pUmLW\",\"error\":\"ControlledInput_error__ivWhb\"};","import {\n  Button,\n  Checkbox,\n  CheckboxProps,\n  Input,\n  InputProps,\n  Upload,\n  UploadProps\n} from 'antd'\nimport { FieldValues, useController, UseControllerProps } from 'react-hook-form'\nimport s from './ControlledInput.module.scss'\nimport { UploadOutlined } from '@ant-design/icons'\nimport { v4 } from 'uuid'\n\ntype WithoutValueAndOnChange<T> = Omit<T, 'onChange' | 'value'>\n\nexport type ControlledInputProps<TFieldValues extends FieldValues> =\n  UseControllerProps<TFieldValues> &\n    (\n      | WithoutValueAndOnChange<InputProps>\n      | WithoutValueAndOnChange<CheckboxProps>\n      | WithoutValueAndOnChange<UploadProps>\n    ) & {\n      as?: 'input' | 'checkbox' | 'upload'\n      label?: string\n      labelPosition?: 'left' | 'right'\n      uploadButtonText?: string\n      errorMessage?: string | null\n    }\n\ntype ComponentProps = {\n  onChange?: (e: any) => void\n  value?: any\n  checked?: boolean\n  [key: string]: any\n}\n\nexport const ControlledInput = <TFieldValues extends FieldValues>(\n  props: ControlledInputProps<TFieldValues>\n) => {\n  const {\n    as,\n    label,\n    labelPosition,\n    name,\n    control,\n    rules,\n    defaultValue,\n    disabled,\n    shouldUnregister,\n    uploadButtonText,\n    errorMessage,\n    ...rest\n  } = props\n\n  // create id\n  const id = v4()\n\n  // controller for custom inputs\n  const {\n    field: { value, onChange }\n  } = useController({\n    name,\n    control,\n    rules,\n    defaultValue,\n    disabled,\n    shouldUnregister\n  })\n\n  // create component props object\n  const ComponentProps: ComponentProps = {\n    [as === 'checkbox' ? 'checked' : 'value']: value,\n    onChange,\n    ...rest\n  }\n\n  if (as === 'upload') {\n    delete ComponentProps.value\n  }\n\n  return (\n    <>\n      {/* left label */}\n      {label &&\n        labelPosition !== 'right' && ( // for default positioning if label exists\n          <label htmlFor={id} className={s.label}>\n            {label}\n          </label>\n        )}\n\n      {as === 'checkbox' ? (\n        // checkbox\n        <Checkbox {...ComponentProps} id={id} />\n      ) : as === 'upload' ? (\n        // upload\n        <Upload {...ComponentProps} id={id}>\n          <Button icon={<UploadOutlined />}>{uploadButtonText}</Button>\n        </Upload>\n      ) : (\n        // input\n        <Input {...ComponentProps} id={id} />\n      )}\n      {errorMessage && <div className={s.error}>{errorMessage}</div>}\n\n      {/* right label */}\n      {label && labelPosition === 'right' && (\n        <label htmlFor={id} className={s.label}>\n          {label}\n        </label>\n      )}\n    </>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"LoginDataInputs_input__+PUEm\"};","import { ControlledInput } from '../../../components/ControlledInput/ControlledInput'\nimport { Flex } from 'antd'\nimport s from './LoginDataInputs.module.scss'\nimport { useAppSelector } from '../../../utils/reduxUtils/reduxUtils'\nimport { selectCaptchaUrl } from '../../../store/auth/selectors'\nimport { useTranslation } from 'react-i18next'\nimport React from 'react'\nimport { InputData, LoginDataInputsProps } from './types'\n\nexport const LoginDataInputs = (props: LoginDataInputsProps) => {\n  const { control, errors } = props\n\n  // get data from the state\n  const captchaUrl = useAppSelector(selectCaptchaUrl)\n\n  // localization\n  const { t } = useTranslation()\n\n  // variables\n  const inputData: InputData[] = [\n    {\n      type: 'email',\n      name: 'email',\n      placeholder: 'Email',\n      control: control,\n      rules: {\n        required: true,\n        pattern: /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/\n      },\n      className: s.input,\n      errorMessage:\n        errors.email?.type === 'required'\n          ? t('Login_email_required')\n          : errors.email?.type === 'pattern'\n            ? t('Login_email_incorrect')\n            : null,\n      autoComplete: 'email'\n    },\n    {\n      type: 'password',\n      name: 'password',\n      placeholder: t('Login_password_placeholder'),\n      control: control,\n      rules: { required: true },\n      className: s.input,\n      errorMessage:\n        errors.password?.type === 'required'\n          ? t('Login_password_incorrect')\n          : null,\n      autoComplete: 'current-password'\n    },\n    {\n      name: 'captcha',\n      control: control,\n      placeholder: 'Captcha',\n      flexWrapper: {\n        children: null,\n        gap: 3,\n        vertical: true\n      },\n      additionalComponent: <img src={captchaUrl!} alt=\"captcha\" />,\n      isHidden: !captchaUrl\n    },\n    {\n      as: 'checkbox',\n      type: 'checkbox',\n      name: 'rememberMe',\n      control: control,\n      label: t('Login_remember_me'),\n      labelPosition: 'right',\n      flexWrapper: {\n        children: null,\n        gap: 3,\n        align: 'center'\n      }\n    }\n  ]\n\n  // jsx variables\n  const mappedInputs = inputData.map((data, i) => {\n    const {\n      flexWrapper,\n      additionalComponent,\n      isHidden,\n      ...controlledInputProps\n    } = data\n\n    const ControlledInputComponent = (\n      <React.Fragment key={i}>\n        {additionalComponent}\n        <ControlledInput {...controlledInputProps} />\n      </React.Fragment>\n    )\n\n    return isHidden ? null : flexWrapper ? (\n      <Flex key={i} {...flexWrapper}>\n        {ControlledInputComponent}\n      </Flex>\n    ) : (\n      ControlledInputComponent\n    )\n  })\n\n  return <>{mappedInputs}</>\n}\n","import { Navigate } from 'react-router-dom'\nimport { Button, Flex, Typography } from 'antd'\nimport { LoginDataInputs } from './LoginDataInputs/LoginDataInputs'\nimport {\n  useAppDispatch,\n  useAppSelector\n} from '../../utils/reduxUtils/reduxUtils'\nimport { selectIsAuth } from '../../store/auth/selectors'\nimport { SubmitHandler, useForm } from 'react-hook-form'\nimport { LoginFormData } from '../../api/types'\nimport { login } from '../../store/auth/asyncActions'\nimport { addAppMessage } from '../../store/app/reducer'\nimport { v4 } from 'uuid'\nimport { useTranslation } from 'react-i18next'\n\nconst Login = () => {\n  // get data from the state\n  const isAuth = useAppSelector(selectIsAuth)\n\n  // dispatch\n  const dispatch = useAppDispatch()\n\n  // localization\n  const { t } = useTranslation()\n\n  // form init\n  const {\n    handleSubmit,\n    formState: { errors },\n    reset,\n    clearErrors,\n    control\n  } = useForm<LoginFormData>()\n\n  const onSubmit: SubmitHandler<LoginFormData> = async data => {\n    const action = await dispatch(login(data))\n    if (login.fulfilled.match(action)) {\n      reset()\n      clearErrors()\n      dispatch(\n        addAppMessage({\n          id: v4(),\n          isError: false,\n          message: t('Login_logged_in')\n        })\n      )\n    }\n  }\n\n  // redirect\n  if (isAuth) {\n    return <Navigate to={'/'} />\n  }\n\n  return (\n    <Flex justify=\"center\">\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Flex align=\"start\" gap={5} vertical>\n          <Typography.Title level={2}>{t('Login_login')}</Typography.Title>\n\n          {/* inputs */}\n          <LoginDataInputs control={control} errors={errors} />\n\n          <Button htmlType=\"submit\" className=\"submitFormButton\">\n            {t('Login_button')}\n          </Button>\n        </Flex>\n      </form>\n    </Flex>\n  )\n}\n\nexport default Login\n"],"names":["ControlledInput","props","as","label","labelPosition","name","control","rules","defaultValue","disabled","shouldUnregister","uploadButtonText","errorMessage","rest","id","v4","field","value","onChange","useController","ComponentProps","_jsxs","_Fragment","children","_jsx","htmlFor","className","s","Checkbox","Upload","Button","icon","UploadOutlined","Input","LoginDataInputs","_errors$email","_errors$email2","_errors$password","errors","captchaUrl","useAppSelector","selectCaptchaUrl","t","useTranslation","mappedInputs","type","placeholder","required","pattern","email","autoComplete","password","flexWrapper","gap","vertical","additionalComponent","src","alt","isHidden","align","map","data","i","controlledInputProps","ControlledInputComponent","React","Flex","Login","isAuth","selectIsAuth","dispatch","useAppDispatch","handleSubmit","formState","reset","clearErrors","useForm","Navigate","to","justify","onSubmit","async","action","login","fulfilled","match","addAppMessage","isError","message","Typography","Title","level","htmlType"],"sourceRoot":""}