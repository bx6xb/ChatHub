{"version":3,"file":"static/js/681.2c0da100.chunk.js","mappings":"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","sources":["webpack://chathub/./src/components/ControlledInput/ControlledInput.module.scss?63e8","components/ControlledInput/ControlledInput.tsx","webpack://chathub/./src/pages/Login/LoginDataInputs/LoginDataInputs.module.scss?82f0","pages/Login/LoginDataInputs/LoginDataInputs.tsx","pages/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"label\":\"ControlledInput_label__pUmLW\",\"error\":\"ControlledInput_error__ivWhb\"};","import {\r\n  Button,\r\n  Checkbox,\r\n  CheckboxProps,\r\n  Input,\r\n  InputProps,\r\n  Upload,\r\n  UploadProps\r\n} from 'antd'\r\nimport { FieldValues, useController, UseControllerProps } from 'react-hook-form'\r\nimport s from './ControlledInput.module.scss'\r\nimport { UploadOutlined } from '@ant-design/icons'\r\nimport { v4 } from 'uuid'\r\n\r\ntype WithoutValueAndOnChange<T> = Omit<T, 'onChange' | 'value'>\r\n\r\nexport type ControlledInputProps<TFieldValues extends FieldValues> =\r\n  UseControllerProps<TFieldValues> &\r\n    (\r\n      | WithoutValueAndOnChange<InputProps>\r\n      | WithoutValueAndOnChange<CheckboxProps>\r\n      | WithoutValueAndOnChange<UploadProps>\r\n    ) & {\r\n      as?: 'input' | 'checkbox' | 'upload'\r\n      label?: string\r\n      labelPosition?: 'left' | 'right'\r\n      uploadButtonText?: string\r\n      errorMessage?: string | null\r\n    }\r\n\r\ntype ComponentProps = {\r\n  onChange?: (e: any) => void\r\n  value?: any\r\n  checked?: boolean\r\n  [key: string]: any\r\n}\r\n\r\nexport const ControlledInput = <TFieldValues extends FieldValues>(\r\n  props: ControlledInputProps<TFieldValues>\r\n) => {\r\n  const {\r\n    as,\r\n    label,\r\n    labelPosition,\r\n    name,\r\n    control,\r\n    rules,\r\n    defaultValue,\r\n    disabled,\r\n    shouldUnregister,\r\n    uploadButtonText,\r\n    errorMessage,\r\n    ...rest\r\n  } = props\r\n\r\n  // create id\r\n  const id = v4()\r\n\r\n  // controller for custom inputs\r\n  const {\r\n    field: { value, onChange }\r\n  } = useController({\r\n    name,\r\n    control,\r\n    rules,\r\n    defaultValue,\r\n    disabled,\r\n    shouldUnregister\r\n  })\r\n\r\n  // create component props object\r\n  const ComponentProps: ComponentProps = {\r\n    [as === 'checkbox' ? 'checked' : 'value']: value,\r\n    onChange,\r\n    ...rest\r\n  }\r\n\r\n  if (as === 'upload') {\r\n    delete ComponentProps.value\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* left label */}\r\n      {label &&\r\n        labelPosition !== 'right' && ( // for default positioning if label exists\r\n          <label htmlFor={id} className={s.label}>\r\n            {label}\r\n          </label>\r\n        )}\r\n\r\n      {as === 'checkbox' ? (\r\n        // checkbox\r\n        <Checkbox {...ComponentProps} id={id} />\r\n      ) : as === 'upload' ? (\r\n        // upload\r\n        <Upload {...ComponentProps} id={id}>\r\n          <Button icon={<UploadOutlined />}>{uploadButtonText}</Button>\r\n        </Upload>\r\n      ) : (\r\n        // input\r\n        <Input {...ComponentProps} id={id} />\r\n      )}\r\n      {errorMessage && <div className={s.error}>{errorMessage}</div>}\r\n\r\n      {/* right label */}\r\n      {label && labelPosition === 'right' && (\r\n        <label htmlFor={id} className={s.label}>\r\n          {label}\r\n        </label>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"LoginDataInputs_input__+PUEm\"};","import { ControlledInput } from '../../../components/ControlledInput/ControlledInput'\r\nimport { Flex } from 'antd'\r\nimport s from './LoginDataInputs.module.scss'\r\nimport { useAppSelector } from '../../../utils/reduxUtils/reduxUtils'\r\nimport { selectCaptchaUrl } from '../../../store/auth/selectors'\r\nimport { useTranslation } from 'react-i18next'\r\nimport React from 'react'\r\nimport { InputData, LoginDataInputsProps } from './types'\r\n\r\nexport const LoginDataInputs = (props: LoginDataInputsProps) => {\r\n  const { control, errors } = props\r\n\r\n  // get data from the state\r\n  const captchaUrl = useAppSelector(selectCaptchaUrl)\r\n\r\n  // localization\r\n  const { t } = useTranslation()\r\n\r\n  // variables\r\n  const inputData: InputData[] = [\r\n    {\r\n      type: 'email',\r\n      name: 'email',\r\n      placeholder: 'Email',\r\n      control: control,\r\n      rules: {\r\n        required: true,\r\n        pattern: /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/\r\n      },\r\n      className: s.input,\r\n      errorMessage:\r\n        errors.email?.type === 'required'\r\n          ? t('Login_email_required')\r\n          : errors.email?.type === 'pattern'\r\n            ? t('Login_email_incorrect')\r\n            : null,\r\n      autoComplete: 'email'\r\n    },\r\n    {\r\n      type: 'password',\r\n      name: 'password',\r\n      placeholder: t('Login_password_placeholder'),\r\n      control: control,\r\n      rules: { required: true },\r\n      className: s.input,\r\n      errorMessage:\r\n        errors.password?.type === 'required'\r\n          ? t('Login_password_incorrect')\r\n          : null,\r\n      autoComplete: 'current-password'\r\n    },\r\n    {\r\n      name: 'captcha',\r\n      control: control,\r\n      placeholder: 'Captcha',\r\n      flexWrapper: {\r\n        children: null,\r\n        gap: 3,\r\n        vertical: true\r\n      },\r\n      additionalComponent: <img src={captchaUrl!} alt=\"captcha\" />,\r\n      isHidden: !captchaUrl\r\n    },\r\n    {\r\n      as: 'checkbox',\r\n      type: 'checkbox',\r\n      name: 'rememberMe',\r\n      control: control,\r\n      label: t('Login_remember_me'),\r\n      labelPosition: 'right',\r\n      flexWrapper: {\r\n        children: null,\r\n        gap: 3,\r\n        align: 'center'\r\n      }\r\n    }\r\n  ]\r\n\r\n  // jsx variables\r\n  const mappedInputs = inputData.map((data, i) => {\r\n    const {\r\n      flexWrapper,\r\n      additionalComponent,\r\n      isHidden,\r\n      ...controlledInputProps\r\n    } = data\r\n\r\n    const ControlledInputComponent = (\r\n      <React.Fragment key={i}>\r\n        {additionalComponent}\r\n        <ControlledInput {...controlledInputProps} />\r\n      </React.Fragment>\r\n    )\r\n\r\n    return isHidden ? null : flexWrapper ? (\r\n      <Flex key={i} {...flexWrapper}>\r\n        {ControlledInputComponent}\r\n      </Flex>\r\n    ) : (\r\n      ControlledInputComponent\r\n    )\r\n  })\r\n\r\n  return <>{mappedInputs}</>\r\n}\r\n","import { Navigate } from 'react-router-dom'\r\nimport { Button, Flex, Typography } from 'antd'\r\nimport { LoginDataInputs } from './LoginDataInputs/LoginDataInputs'\r\nimport {\r\n  useAppDispatch,\r\n  useAppSelector\r\n} from '../../utils/reduxUtils/reduxUtils'\r\nimport { selectIsAuth } from '../../store/auth/selectors'\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\nimport { LoginFormData } from '../../api/types'\r\nimport { login } from '../../store/auth/asyncActions'\r\nimport { addAppMessage } from '../../store/app/reducer'\r\nimport { v4 } from 'uuid'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nconst Login = () => {\r\n  // get data from the state\r\n  const isAuth = useAppSelector(selectIsAuth)\r\n\r\n  // dispatch\r\n  const dispatch = useAppDispatch()\r\n\r\n  // localization\r\n  const { t } = useTranslation()\r\n\r\n  // form init\r\n  const {\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n    clearErrors,\r\n    control\r\n  } = useForm<LoginFormData>()\r\n\r\n  const onSubmit: SubmitHandler<LoginFormData> = async data => {\r\n    const action = await dispatch(login(data))\r\n    if (login.fulfilled.match(action)) {\r\n      reset()\r\n      clearErrors()\r\n      dispatch(\r\n        addAppMessage({\r\n          id: v4(),\r\n          isError: false,\r\n          message: t('Login_logged_in')\r\n        })\r\n      )\r\n    }\r\n  }\r\n\r\n  // redirect\r\n  if (isAuth) {\r\n    return <Navigate to={'/'} />\r\n  }\r\n\r\n  return (\r\n    <Flex justify=\"center\">\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Flex align=\"start\" gap={5} vertical>\r\n          <Typography.Title level={2}>{t('Login_login')}</Typography.Title>\r\n\r\n          {/* inputs */}\r\n          <LoginDataInputs control={control} errors={errors} />\r\n\r\n          <Button htmlType=\"submit\" className=\"submitFormButton\">\r\n            {t('Login_button')}\r\n          </Button>\r\n        </Flex>\r\n      </form>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Login\r\n"],"names":["ControlledInput","props","as","label","labelPosition","name","control","rules","defaultValue","disabled","shouldUnregister","uploadButtonText","errorMessage","rest","id","v4","field","value","onChange","useController","ComponentProps","_jsxs","_Fragment","children","_jsx","htmlFor","className","s","Checkbox","Upload","Button","icon","UploadOutlined","Input","LoginDataInputs","_errors$email","_errors$email2","_errors$password","errors","captchaUrl","useAppSelector","selectCaptchaUrl","t","useTranslation","mappedInputs","type","placeholder","required","pattern","email","autoComplete","password","flexWrapper","gap","vertical","additionalComponent","src","alt","isHidden","align","map","data","i","controlledInputProps","ControlledInputComponent","React","Flex","Login","isAuth","selectIsAuth","dispatch","useAppDispatch","handleSubmit","formState","reset","clearErrors","useForm","Navigate","to","justify","onSubmit","async","action","login","fulfilled","match","addAppMessage","isError","message","Typography","Title","level","htmlType"],"sourceRoot":""}